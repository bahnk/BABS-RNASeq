import java.nio.file.Paths

singularity {
	enabled = true
	runOptions = "-B /camp"
}

process {

	tag = { name }

	container = "/camp/stp/babs/working/bahn/singularity/rnaseq.old.sif"

	publish_mode = "symlink"
	publish_overwrite = true

	//executor = "local"
	executor = "slurm"
	cpus = 2
	memory = 12G
	time = '00:10:00'
	
	withName: fastqc {

		publishDir = [
			path: { Paths.get( params.qc_dir , "fastqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: cutadapt {

		publishDir = [
			path: { Paths.get( params.qc_dir , "cutadapt" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: rsem {

		executor = "slurm"

		//cpus = 2
		//time = '01:00:00'

		publishDir = [
			path: { Paths.get( params.results_dir , "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: metadata {

		publishDir = [
			path: { Paths.get( params.results_dir , "metadata" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withLabel: unique_process {
		tag = "unique"
	}

	withLabel: r_analysis {

		executor = "local"
		tag = "unique"

		publishDir = [
			path: { Paths.get( params.results_dir , "analysis" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	witName: dds {

		executor = "slurm"
		cpus = 4
	}

	withName: multiqc {

		executor = "local"

		publishDir = [
			path: { Paths.get( params.results_dir ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	//$cutadapt {

	//	module = [ { check_modules( default_modules["cutadapt"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "cutadapt" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	time = '03:00:00'
	//}

	//$fastqc_cutadapt {

	//	module = [ { check_modules( default_modules["fastqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "fastqc", "cutadapt" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$rsem {

	//	module = [
	//		{ check_modules( default_modules["rsem"] ) },
	//		{ check_modules( default_modules["star"] ) }
	//	]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "rsem" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	cpus = 32
	//	time = '03:00:00'
	//}

	//$metadata {

	//	publishDir = [
	//		path: { Paths.get( results_dir, "rsem" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}
	//
	//
	//$insert_size {

	//	module = [ { check_modules( default_modules["samtools"] ) } ]

	//}
	//
	//$sort_index {

	//	module = [ { check_modules( default_modules["samtools"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "rsem" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	cpus = 32
	//	memory = 32G
	//}

	//$group {

	//	module = [ { check_modules( default_modules["picard"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "group" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	time = '06:00:00'
	//}

	//$index {

	//	module = [ { check_modules( default_modules["samtools"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "group" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$rnaseqmetrics {

	//	module = [ { check_modules( default_modules["picard"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "rnaseqmetrics" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$multimetrics {

	//	module = [
	//		{ check_modules( default_modules["picard"] ) },
	//		{ check_modules( default_modules["r"] ) }
	//	]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "multimetrics" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$complexity {

	//	module = [ { check_modules( default_modules["picard"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "complexity" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$duplicates {

	//	module = [ { check_modules( default_modules["picard"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "picard", "duplicates" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	time = '12:00:00'
	//}

	//$infer_experiment {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "infer_experiment" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$junction_annotation {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "junction_annotation" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$junction_saturation {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "junction_saturation" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$mismatch_profile {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "mismatch_profile" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$read_distribution {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "read_distribution" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$transcript_integrity_number {

	//	module = [ { check_modules( default_modules["rseqc"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rseqc", "transcript_integrity_number" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//	
	//	time = '07:00:00'
	//}

	//$rnaseqc {

	//	module = [ { check_modules( default_modules["picard"] ) },
	//	       	   { check_modules( default_modules["rnaseqc"] ) }
	//	]

	//	publishDir = [
	//		path: { Paths.get( qc_dir, "rnaseqc" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$build_matrix {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite,
	//		saveAs: { filename ->
	//			if ( filename.indexOf(".rda") != -1 ) {
	//				"rda/$filename"
	//			} else if ( filename.indexOf(".csv") != 1 ) {
	//				"csv/$filename"
	//			} else {
	//				null
	//			}
	//		}
	//	]
	//}

	//$add_condition_column {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "rda" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$create_dds {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "rda" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$create_vst {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "rda" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$create_rlog {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "rda" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$do_pca {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "rda" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$pca_to_json {

	//	executor = "local"

	//	module = [ { check_modules( default_modules["r"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( results_dir, "analysis", "json" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	//$multiqc {

	//	executor = "local"

	//	module = [
	//		{ check_modules( default_modules["anaconda"] ) }
	//	]

	//	publishDir = [
	//		path: { qc_dir },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}
}

